(group_by(activity, date), sum(steps))
summarise(group_by(activity, date), mean(steps), sum(steps))
library(dplyr)
summarise(group_by(activity, date), mean(steps), sum(steps))
activity <- read.csv("~/Activity Monitoring Assignment/activity.csv")
activity$date<-as.Date.factor(activity$date)
summarise(group_by(activity, date), mean(steps), sum(steps))
StepsPerDay <- summarise(group_by(activity, date), sum(steps))
StepsPerDay
mean(StepsPerDay$`sum(steps)`)
mean(StepsPerDay$`sum(steps)`, na.rm = TRUE)
print(MeanStepsPerDay)
MeanStepsPerDay <- mean(StepsPerDay$`sum(steps)`, na.rm = TRUE)
print(MeanStepsPerDay)
StepsPerDay <- summarise(group_by(activity, date), sum(steps, na.rm = TRUE))
MeanStepsPerDay <- mean(StepsPerDay$`sum(steps)`, na.rm = TRUE)
print(MeanStepsPerDay)
StepsPerDay <- summarise(group_by(activity, date), sum(steps, na.rm = TRUE))
StepsPerDay
MeanStepsPerDay <- mean(StepsPerDay$`sum(steps)`, na.rm = TRUE)
MeanStepsPerDay <- mean(StepsPerDay[$`sum(steps)`[,2], na.rm = TRUE)
MeanStepsPerDay <- mean(StepsPerDay[,2], na.rm = TRUE)
StepsPerDay[,2]
MeanStepsPerDay <- mean(StepsPerDay[,2])
StepsPerDay[,2]
mean(StepsPerDay[,2])
StepsPerDay <- summarise(group_by(activity, date), sum(steps))
MeanStepsPerDay <- mean(StepsPerDay[,2], na.rm = TRUE)
StepsPerDay <- summarise(group_by(activity, date), sum(steps))
StepsPerDay
StepsPerDay[,2]
mean(StepsPerDay[,2]
)
MeanStepsPerDay <- mean(StepsPerDay$`sum(steps)`, na.rm = TRUE)
MeanStepsPerDay
StepsPerDay <- summarise(group_by(activity, date), sum(steps, na.rm = TRUE))
MeanStepsPerDay <- mean(StepsPerDay$`sum(steps)`, na.rm = TRUE)
MeanStepsPerDay <- mean(StepsPerDay$`sum(steps, na.rm = TRUE)`, na.rm = TRUE)
print(MeanStepsPerDay)
StepsPerDay <- summarise(group_by(activity, date), sum(steps))
MeanStepsPerDay <- mean(StepsPerDay$`sum(steps)`, na.rm = TRUE)
print(MeanStepsPerDay)
URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
URL
download.file(url = URL, destfile = "activity.zip")
unzip("activity.zip")
print("mean total number of steps taken per day", MeanStepsPerDay)
print(c("mean total number of steps taken per day",MeanStepsPerDay))
MeanStepsPerDay <- mean(StepsPerDay$`sum(steps)`)
print(MeanStepsPerDay)
load(ggplot2)
library("ggplot2", lib.loc="~/R/win-library/3.2")
load("ggplot2")
library("dplyr")
load("ggplot2")
library("ggplot2")
library(dplyr)
library(ggplot2)
StepsPerDay
ggplot(StepsPerDay$`sum(steps)`, aes(x=x), geom_histogram() )
ggplot(StepsPerDay$`sum(steps)`, geom_histogram() )
ggplot(StepsPerDay$`sum(steps)`, aes(x=x) + geom_histogram() )
hist(StepsPerDay$`sum(steps)`)
hist(StepsPerDay$`sum(steps)`, breaks = 10)
hist(StepsPerDay$`sum(steps)`, breaks = 20)
hist(StepsPerDay$`sum(steps)`, breaks = 7)
hist(StepsPerDay$`sum(steps)`, breaks = 8)
hist(StepsPerDay$`sum(steps)`, breaks = 10)
hist(StepsPerDay$`sum(steps)`, breaks = 12)
hist(StepsPerDay$`sum(steps)`, breaks = 15)
hist(StepsPerDay$`sum(steps)`, breaks = 5)
data(discoveries)
d <- as.data.frame(discoveries)
d
StepsPerDay$`sum(steps)
)
)
StepsPerDay$`sum(steps)`
ggplot(StepsPerDay$`sum(steps)`, aes(x=x) + geom_histogram() )
ggplot(StepsPerDay$`sum(steps)`, aes(x=x) + geom_histogram(binwwidth=10) )
ggplot(as.data.frame(StepsPerDay$`sum(steps)`), aes(x=x) + geom_histogram(binwwidth=10) )
as.data.frame(StepsPerDay$`sum(steps)`)
ggplot(as.data.frame(StepsPerDay$`sum(steps)`) )
ggplot(as.data.frame(StepsPerDay$`sum(steps)`), aes(x=x) )
ggplot(as.data.frame(StepsPerDay$`sum(steps)`), aes(x=x) + geom_histogram() )
StepsPerDay
qplot(`sum(steps)`, data=StepsPerDay, geom=histogram )
qplot(`sum(steps)`, data=StepsPerDay, geom=histogram)
qplot(sum(steps), data=StepsPerDay, geom=histogram)
qplot(sum(steps), data=StepsPerDay)
qplot(StepsPerDay$`sum(steps)`)
qplot(StepsPerDay$`sum(steps)`, binwidth = 100)
qplot(StepsPerDay$`sum(steps)`, binwidth = 5000)
qplot(StepsPerDay$`sum(steps)`, binwidth = 1000)
qplot(StepsPerDay$`sum(steps)`, binwidth = 3000)
hist(StepsPerDay$`sum(steps)`)
hist(StepsPerDay$`sum(steps)`,
main = "Total number of steps per day",
xlab = "Steps per day")
library(dplyr, quietly = TRUE)
median(StepsPerDay$`sum(steps)`, na.rm = TRUE)
mean(StepsPerDay$`sum(steps)`, na.rm = TRUE)
mean(StepsPerDay$`sum(steps)`)
, na.rm = TRUE
median(StepsPerDay$`sum(steps)`)
median(StepsPerDay$`sum(steps)`, na.rm = TRUE)
StepsPerDay
str(StepsPerDay)
summarise(group_by(activity, interval), mean(steps))
AverageStepsPerInterval <- summarise(group_by(activity, interval), mean(steps, na.rm = TRUE))
AverageStepsPerInterval
plot(AverageStepsPerInterval$interval, AverageStepsPerInterval$`mean(steps, na.rm = TRUE)`)
plot(AverageStepsPerInterval$interval, AverageStepsPerInterval$`mean(steps, na.rm = TRUE)`, type = "l")
AverageStepsPerInterval <- summarise(group_by(activity, interval), mean(steps, na.rm = TRUE))
plot(AverageStepsPerInterval$interval, AverageStepsPerInterval$`mean(steps, na.rm = TRUE)`,
type = "l",
main = "Time series average steps by 5-minute interval",
xlab = "5-minute interval",
ylab = "Average Steps")
max(AverageStepsPerInterval)
max(AverageStepsPerInterval)[,1]
max(AverageStepsPerInterval[,1])
max(AverageStepsPerInterval[,2])
hour <- ceiling(activity$interval/100)
hour
minute <- floor(activity$interval/100)
minute
minute <- ((activity$interval/100) - (ceiling(activity$interval/100))) * 100
minute
minute <- (-(activity$interval/100) - (ceiling(activity$interval/100))) * 100
minute
minute <- ((ceiling(activity$interval/100)) - (activity$interval/100)) * 100
minute
activity$interval/100
(ceiling(activity$interval/100)) - (activity$interval/100)
hour
minute <- activity$interval/100 - hour
minute
hour <- trunc(activity$interval/100)
hour
minute <- activity$interval/100 - hour
minute
minute <- (activity$interval/100 - hour) * 100
minute
time()
time <- c(hour,":",minute)
time
time <- paste(hour,":",minute)
time
minute <- round(activity$interval/100 - hour) * 100)
time <- paste(hour,":",minute)
time
minute <- round(activity$interval/100 - hour) * 100, digits = 0)
minute <- trunc(activity$interval/100 - hour) * 100)
minute <- trunc((activity$interval/100 - hour) * 100)
minute
hour
time <- paste(hour,":",minute)
time
strptime(time)
strptime(time, format)
strptime(time, format = "%H:%M")
time
time <- paste(hour,":",minute, sep = "")
strptime(time, format = "%H:%M")
activity$date
paste(activity$date,hour,":",minute, sep = "")
paste(activity$date," ",hour,":",minute, sep = "")
time <- paste(activity$date," ",hour,":",minute, sep = "")
strptime(time, format = "%Y-%m-%d %H:%M")
time
minute
minute <- celinig((activity$interval/100 - hour) * 100)
minute
hour
activity$interval/100
activity$interval/100 - hour
minute <- ceiling((activity$interval/100 - hour) * 100)
minute
minute <- trunc((activity$interval/100 - hour) * 100)
minute
activity$interval/100 - hour
activity$interval/100 - hour) * 100
(activity$interval/100 - hour) * 100)
(activity$interval/100 - hour) * 100
minute
minute <- (activity$interval/100 - hour) * 100
minute
time <- paste(hour,":",minute, sep = "")
time
minute
time <- paste(activity$date," ",hour,":",minute, sep = "")
strptime(time, format = "%Y-%m-%d %H:%M")
time <- paste(hour,":",minute, sep = "")
time <- paste(activity$date," ",hour,":",minute, sep = "")
strptime(time, format = "%Y-%m-%d %H:%M")
minute
class(minute)
minute <- as.integer((activity$interval/100 - hour) * 100)
class(minute)
class(hour)
hour <- as.integer(trunc(activity$interval/100))
class(hour)
hour
minute
time <- paste(hour,":",minute, sep = "")
time
hour <- as.integer(activity$interval/100)
hour
minute <- as.integer((activity$interval/100 - hour) * 100)
minute
activity$interval/100 - hour
(activity$interval/100 - hour) * 100
minute <- as.integer((activity$interval/100 - hour) * 100)
table(minute)
table(hour)
minute <- (activity$interval/100 - hour) * 100
table(minute)
minute <- round((activity$interval/100 - hour) * 100)
table(minute)
class(minute)
class(hour)
minute <- as.integerround((activity$interval/100 - hour) * 100)
table(minute)
class(minute)
time <- paste(activity$date," ",hour,":",minute, sep = "")
strptime(time, format = "%Y-%m-%d %H:%M")
table(strptime(time, format = "%Y-%m-%d %H:%M"))
time <- strptime(time, format = "%Y-%m-%d %H:%M")
time
activity$time <- time
str(activity)
activity$dateTime <- time
activity$dateTime <- dateTime
str(activity)
activity <- read.csv("activity.csv")
activity$date<-as.Date.factor(activity$date)
hour <- as.integer(activity$interval/100)
minute <- as.integerround((activity$interval/100 - hour) * 100)
time <- paste(activity$date," ",hour,":",minute, sep = "")
dateTime <- strptime(time, format = "%Y-%m-%d %H:%M")
activity$dateTime <- dateTime
# Explore data frame
str(activity)
activity <- read.csv("activity.csv")
activity
activity$date<-as.Date.factor(activity$date)
activity <- read.csv("activity.csv")
activity$date<-as.Date.factor(activity$date)
hour <- as.integer(activity$interval/100)
minute <- as.integerround((activity$interval/100 - hour) * 100)
minute <- as.integer(round((activity$interval/100 - hour) * 100)
minute <- as.integer(round((activity$interval/100 - hour) * 100))
minute <- as.integer(round((activity$interval/100 - hour) * 100))
time <- paste(activity$date," ",hour,":",minute, sep = "")
activity$time <- time
dateTime <- strptime(time, format = "%Y-%m-%d %H:%M")
activity$dateTime <- dateTime
str(activity)
table(activity$time)
time <- paste(activity$date," ",hour,":",minute, sep = "")
time
time <- paste(hour,":",minute, sep = "")
time
activity <- read.csv("activity.csv")
activity$date<-as.Date.factor(activity$date)
hour <- as.integer(activity$interval/100)
minute <- as.integer(round((activity$interval/100 - hour) * 100))
time <- paste(hour,":",minute, sep = "")
time
activity$time <- time
str(activity)
activity$time <- strptime(time, format = "%H:%M")
str(activity)
head(activity)
tail(activity)
activity <- read.csv("activity.csv")
activity$date<-as.Date.factor(activity$date)
#Create time and dateTime variables from date and interval variables.
hour <- as.integer(activity$interval/100)
minute <- as.integer(round((activity$interval/100 - hour) * 100))
time <- paste(hour,":",minute, sep = "")
activity$time <- strptime(time, format = "%H:%M")
dateTime <- paste(activity$date," ",hour,":",minute, sep = "")
activity$dateTime <- strptime(dateTime, format = "%Y-%m-%d %H:%M")
table(activity$time)
str(activity)
activity <- read.csv("activity.csv")
activity$date<-as.Date.factor(activity$date)
#Create time and dateTime variables from date and interval variables.
hour <- as.integer(activity$interval/100)
minute <- as.integer(round((activity$interval/100 - hour) * 100))
time <- paste(hour,":",minute, sep = "")
activity$time <- strptime(time, format = "%H:%M")
dateTime <- paste(activity$date," ",hour,":",minute, sep = "")
activity$dateTime <- strptime(dateTime, format = "%Y-%m-%d %H:%M")
table(activity)
table(activity$interval)
table(activity$time)
activity
str(activity
str(activity)
table(activity$date)
table(activity$dateTime)
names(activity)
str(activity)
head(activity)
tail(activity)
AverageStepsPerInterval <- summarise(group_by(activity, time), mean(steps, na.rm = TRUE))
AverageStepsPerInterval <- summarise(group_by(activity, as.factor(time), mean(steps, na.rm = TRUE))
AverageStepsPerInterval <- summarise(group_by(activity, as.factor(time)), mean(steps, na.rm = TRUE))
AverageStepsPerInterval <- summarise(group_by(activity, interval), mean(steps, na.rm = TRUE))
AverageStepsPerInterval <- summarise(group_by(activity, interval), mean(steps, na.rm = TRUE))
AverageStepsPerInterval <- summarise(group_by(activity, interval), mean(steps, na.rm = TRUE))
time
strptime(time, format = "%H:%M")
activity$time
activity <- read.csv("activity.csv")
activity$date<-as.Date.factor(activity$date)
#Create time and dateTime variables from date and interval variables.
hour <- as.integer(activity$interval/100)
minute <- as.integer(round((activity$interval/100 - hour) * 100))
time <- paste(hour,":",minute, sep = "")
#activity$time <- strptime(time, format = "%H:%M")
dateTime <- paste(activity$date," ",hour,":",minute, sep = "")
#activity$dateTime <- strptime(dateTime, format = "%Y-%m-%d %H:%M")
# Explore data frame
str(activity)
head(activity)
tail(activity)
```
## What is mean total number of steps taken per day?
1. Calculate the total number of steps taken per day
```{r Total steps per day}
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
#Calculate total number of steps per day
StepsPerDay <- summarise(group_by(activity, date), sum(steps))
StepsPerDay
hist(StepsPerDay$`sum(steps)`,
main = "Total number of steps per day",
xlab = "Steps per day")
mean(StepsPerDay$`sum(steps)`, na.rm = TRUE)
median(StepsPerDay$`sum(steps)`, na.rm = TRUE)
AverageStepsPerInterval <- summarise(group_by(activity, interval), mean(steps, na.rm = TRUE))
plot(AverageStepsPerInterval$interval, AverageStepsPerInterval$`mean(steps, na.rm = TRUE)`,
type = "l",
main = "Time series average steps by 5-minute interval",
xlab = "5-minute interval",
ylab = "Average Steps")
activity$time <- strptime(time, format = "%H:%M")
AverageStepsPerInterval <- summarise(group_by(activity, interval), mean(steps, na.rm = TRUE))
plot(AverageStepsPerInterval$time, AverageStepsPerInterval$`mean(steps, na.rm = TRUE)`,
type = "l",
main = "Time series average steps by 5-minute interval",
xlab = "5-minute interval",
ylab = "Average Steps")
activity <- read.csv("activity.csv")
activity$date<-as.Date.factor(activity$date)
#Create time and dateTime variables from date and interval variables.
hour <- as.integer(activity$interval/100)
minute <- as.integer(round((activity$interval/100 - hour) * 100))
time <- paste(hour,":",minute, sep = "")
time <- strptime(paste(hour,":",minute, sep = ""), format = "%H:%M")
time
dateTime <- strptime(paste(activity$date," ",hour,":",minute, sep = ""), format = "%Y-%m-%d %H:%M")
dateTime
str(activity)
head(activity)
tail(activity)
AverageStepsPerInterval <- summarise(group_by(activity, interval), mean(steps, na.rm = TRUE))
plot(time, AverageStepsPerInterval$`mean(steps, na.rm = TRUE)`,
type = "l",
main = "Time series average steps by 5-minute interval",
xlab = "5-minute interval",
ylab = "Average Steps")
length(time)
plot(unique(time), AverageStepsPerInterval$`mean(steps, na.rm = TRUE)`,
type = "l",
main = "Time series average steps by 5-minute interval",
xlab = "5-minute interval",
ylab = "Average Steps")
length(time)
length(unique(time))
length(AverageStepsPerInterval$`mean(steps, na.rm = TRUE)`)
max(AverageStepsPerInterval[,2])
index(max(AverageStepsPerInterval[,2]))
AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2])
AverageStepsPerInterval[AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2],]
AverageStepsPerInterval[AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2],
AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2],
AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2]
AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2]
AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2]
AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2])
AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2])
AverageStepsPerInterval[x,]
AverageStepsPerInterval
subset(AverageStepsPerInterval, x)
x<-AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2])
x
subset(AverageStepsPerInterval, x)
AverageStepsPerInterval
AverageStepsPerInterval[x,]
subset(AverageStepsPerInterval, x)
AverageStepsPerInterval[x,]
AverageStepsPerInterval[AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2]),]
x <- AverageStepsPerInterval[AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2]),]
x
x[1]
as.integer(round((x[1]/100 - as.integer(x[1]/100)) * 100))
maxInt <- paste(as.integer(x[1]/100), ":", as.integer(round((x[1]/100 - as.integer(x[1]/100)) * 100)), sep = "")
maxInt
Therefore, **`r maxInt`** has the *max average number of steps*: **`r x[2]`**.
Therefore, **`r maxInt`** has the *max average number of steps*: **`r round(x[2])`**.
x <- AverageStepsPerInterval[AverageStepsPerInterval[,2] == max(AverageStepsPerInterval[,2]),]
maxInt <- paste(as.integer(x[1]/100), ":", as.integer(round((x[1]/100 - as.integer(x[1]/100)) * 100)), sep = "")
maxInt
round(x[2])
maxSteps <- round(x[2])
maxSteps
complete.cases(activity)
activity
head(activity)
sum(complete.cases(activity))
dim(activity)
dim(activity)[1]
dim(activity)[1] - sum(complete.cases(activity))
dim(activity)[1] - sum(complete.cases(activity))
numbMissing <- dim(activity)[1] - sum(complete.cases(activity))
library(plyr)
detach("package:dplyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
library(plyr)
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
ddply(activity, ~ interval, transform, steps = impute.mean(traits))
ddply(activity, ~ interval, transform, steps = impute.mean(steps))
activityComplete <- ddply(activity, ~ interval, transform, steps = impute.mean(steps))
str(activityComplete)
complete.cases(activityComplete)
sum(complete.cases(activityComplete))
StepsPerDayComplete <- summarise(group_by(activity, date), sum(steps))
StepsPerDayComplete
library(dplyr, quietly = TRUE, warn.conflicts = FALSE)
StepsPerDayComplete <- summarise(group_by(activity, date), sum(steps))
StepsPerDayComplete
StepsPerDay
detach("package:plyr", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:dplyr", unload=TRUE)
library("plyr", lib.loc="~/R/win-library/3.2")
detach("package:plyr", unload=TRUE)
i
activity <- read.csv("activity.csv")
activity$date<-as.Date.factor(activity$date)
#Create time and dateTime variables from date and interval variables.
hour <- as.integer(activity$interval/100)
minute <- as.integer(round((activity$interval/100 - hour) * 100))
time <- strptime(paste(hour,":",minute, sep = ""), format = "%H:%M")
dateTime <- strptime(paste(activity$date," ",hour,":",minute, sep = ""), format = "%Y-%m-%d %H:%M")
# Explore data frame
str(activity)
head(activity)
tail(activity)
```
## What is mean total number of steps taken per day?
1. Calculate the total number of steps taken per day
```{r Total steps per day}
library(plyr)
