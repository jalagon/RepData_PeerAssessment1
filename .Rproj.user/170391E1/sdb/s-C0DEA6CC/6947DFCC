{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Reproducible Research: Peer Assessment 1\"\nauthor: \"jalagon\"\noutput: \nhtml_document:\nkeep_md: TRUE\n---\n\n\n## Loading and preprocessing the data\n\n1. Load the data (i.e. `read.csv()`)\n\nFirst, download the data from internet.\n\n```{r Download and extract data, cache=TRUE}\nURL <- \"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip\"\ndownload.file(url = URL, destfile = \"activity.zip\")\nunzip(\"activity.zip\")\n```\n\nThen, read data in R.\n\n```{r Read data}\n# Read data. I assume you have downloaded zip data and extracted *activity.csv*  to working directory.\nactivity <- read.csv(\"activity.csv\")\n```\n\n2. Process/transform the data (if necessary) into a format suitable for your analysis.  \n\nChange date variable to date format and check everything looks ok\n```{r Process data}\n# Change date variable to date format\nactivity$date<-as.Date.factor(activity$date)\n\n#Create time and dateTime variables from date and interval variables.\nhour <- as.integer(activity$interval/100)\nminute <- as.integer(round((activity$interval/100 - hour) * 100))\ntime <- strptime(paste(hour,\":\",minute, sep = \"\"), format = \"%H:%M\")\ndateTime <- strptime(paste(activity$date,\" \",hour,\":\",minute, sep = \"\"), format = \"%Y-%m-%d %H:%M\")\n\n# Explore data frame\nstr(activity)\nhead(activity)\ntail(activity)\n```\n\n\n## What is mean total number of steps taken per day?\n\n1. Calculate the total number of steps taken per day\n\n```{r Total steps per day}\nlibrary(plyr)\nlibrary(dplyr)\n# Calculate total number of steps per day\nStepsPerDay <- summarise(group_by(activity, date), sum(steps))\nStepsPerDay\n\n```\n\n2. Make a histogram of the total number of steps taken each day\n```{r Histogram}\nhist(StepsPerDay$`sum(steps)`,\n     main = \"Total number of steps per day\",\n     xlab = \"Steps per day\")\n```\n\n\n3. Calculate and report the mean and median of the total number of steps taken per day\n```{r Mean and median steps per day}\n# Calculate mean and median across days, ignoring NA\nmeanSteps <- mean(StepsPerDay$`sum(steps)`, na.rm = TRUE)\nmedianSteps <- median(StepsPerDay$`sum(steps)`, na.rm = TRUE)\n```\n\nThe mean and median steps taken per day are **`r meanSteps`** and **`r medianSteps`**, respectively.\n\n## What is the average daily activity pattern?\n\n1. Make a time series plot (i.e. `type = \"l\"`) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)\n```{r Time Series}\n# Calculate Average Steps per Interval\nAverageStepsPerInterval <- summarise(group_by(activity, interval), mean(steps, na.rm = TRUE))\nplot(unique(time), AverageStepsPerInterval$`mean(steps, na.rm = TRUE)`, \n     type = \"l\",\n     main = \"Time series average steps by 5-minute interval\",\n     xlab = \"5-minute interval\",\n     ylab = \"Average Steps\")\n```\n\n2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?\n```{r Max steps interval}\n# Find the max and extract the interval\nx <- AverageStepsPerInterval[AverageStepsPerInterval[, 2] == max(AverageStepsPerInterval[, 2]), ]\nmaxInt <- paste(as.integer(x[1] / 100), \":\", \n                as.integer(round((x[1] / 100 - as.integer(x[1] / 100)) * 100)), \n                sep = \"\")\nmaxSteps <- round(x[2])\n```\n\nThe interval **`r maxInt`** has the max average number of steps, which is **`r maxSteps`**.\n\n## Imputing missing values\n\n1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)\n\n```{r count missing}\n#Calculate number of rows with NAs\nnumbMissing <- dim(activity)[1] - sum(complete.cases(activity))\npercMissing <- round(numbMissing / dim(activity)[1] * 100)\n```\n\nThere are **`r numbMissing`** cases with missing values, that is **`r percMissing`%**.\n\n2. Devise a strategy for filling in all of the missing values in the dataset. \n\nMy strategy will be **to replace missing values by the mean for that 5-minute interval**.\n\n3. Create a new dataset that is equal to the original dataset but with the missing data filled in.\n\n```{r replace missing values}\n# Used approach from http://www.mail-archive.com/r-help@r-project.org/msg58289.html\nimpute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))\nactivityComplete <- ddply(activity, ~ interval, transform, steps = impute.mean(steps))\n```\n\n4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?\n\n```{r calculate}\n# Calculate total number of steps per day\nStepsPerDayComplete <- summarise(group_by(activityComplete, date), sum(steps))\n# Generate Histogram\nhist(StepsPerDayComplete$`sum(steps)`,\n     main = \"Total number of steps per day\",\n     xlab = \"Steps per day (imputed NAs)\")\n# Calculate mean and median across days\nmeanStepsComplete <- round(mean(StepsPerDayComplete$`sum(steps)`), digits = 2)\nmedianStepsComplete <- round(median(StepsPerDayComplete$`sum(steps)`), digits = 2)\n```\n\nThe mean and median steps taken per day are both **`r meanStepsComplete`**. \n\nTherefore, the impact of imputing missing data was **negligible**.\n\n## Are there differences in activity patterns between weekdays and weekends?\n\nFor this part the weekdays() function may be of some help here. Use the dataset with the filled-in missing values for this part.\n\n1. Create a new factor variable in the dataset with two levels – *weekday* and *weekend* indicating whether a given date is a weekday or weekend day.\n\n```{r weekdays}\nSemana <- c(\"lun\", \"mar\", \"mié\", \"jue\", \"vie\")\nactivityComplete$weekday <- \n        factor(weekdays(activityComplete$date, abbreviate = TRUE) %in% Semana,\n                levels=c(FALSE, TRUE),\n                labels=c('weekend', 'weekday')\n        )\nstr(activityComplete)\n```\n\n2. Make a panel plot containing a time series plot (i.e. type = \"l\") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.\n\n```{r panel plot}\n# Calculate Average Steps per Interval per weekday/weekend\nAverageStepsPerIntervalComplete <- summarise(group_by(activityComplete, interval, weekday), mean(steps))\n#Subset\nAverageStepsPerIntervalCompleteWeekend <- subset(AverageStepsPerIntervalComplete, weekday==\"weekend\")\nAverageStepsPerIntervalCompleteWeekday <- subset(AverageStepsPerIntervalComplete, weekday==\"weekday\")\n#Plot\npar(mfrow=c(2,1))\nplot(unique(time), AverageStepsPerIntervalCompleteWeekend$`mean(steps)`, \n     type = \"l\",\n     main = \"WEEKENDS\",\n     xlab = \"5-minute interval\",\n     ylab = \"Average Steps (imputed NAs)\",\n     ylim  = c(0,250))\nplot(unique(time), AverageStepsPerIntervalCompleteWeekday$`mean(steps)`, \n     type = \"l\",\n     main = \"WEEKDAYS\",\n     xlab = \"5-minute interval\",\n     ylab = \"Average Steps (imputed NAs)\",\n     ylim  = c(0,250))\n\n```\n\nThank you.\n",
    "created" : 1447532525293.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2239064597",
    "id" : "6947DFCC",
    "lastKnownWriteTime" : 1447571651,
    "path" : "~/GitHub/RepData_PeerAssessment1/PA1_template.Rmd",
    "project_path" : "PA1_template.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}